generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "node ./dist/index.js"
  output   = "../ERD.svg"
  theme    = "default"
}


model UserModel {
  name           String
  nick           String
  gender         Gender
  phone          String       @unique
  hashedPassword String?
  email          String?      @unique
  birth          DateTime
  userId         String       @id @unique @default(uuid())
  accepted       AcceptedType @default(accepted)
  isAdmin        Boolean      @default(false)

  blockUntil  DateTime?
  blockLounge DateTime?
  blockChat   DateTime?

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
  usedAt   DateTime  @default(now())


  like Int @default(0)

  card             CardModel?
  ChatModel        ChatModel[]              @relation("ChatModelToUser")
  writeKlubReview  KlubReview[]
  md               MdModel[]
  MdRequestModel   MdRequestModel[]         @relation("MdRequestModelToUser")
  niceIdentify     NiceIdentify?
  notification     NotificationModel?
  PostComment      LoungePostCommentModel[]
  Post             LoungePostModel[]
  Reservation      Reservation[]
  ReviewLikeModel  KlubReviewLikeModel[]
  securities       Securities?
  sassion          SessionModel[]
  setting          UserSettingProfileModel?
  UsersOnChatRooms UsersOnChatRooms[]       @relation("UserToUsersOnChatRooms")

  report                     ReportBaseModel[]            @relation("report")
  reported                   ReportBaseModel[]            @relation("reported")
  ReportBaseModel            ReportBaseModel[]            @relation("reported ")
  LoungePostCommentLikeModel LoungePostCommentLikeModel[]
  LoungePostLikeModel        LoungePostLikeModel[]

  beLike  MdLikeHistory[] @relation("likedMd")
  myLikesMd MdLikeHistory[] @relation("likeMd")

  @@map("User")
}

model NotificationModel {
  id      String   @id @unique @default(uuid())
  userId  String   @unique
  title   String
  content String
  data    Json?
  dataStr String?
  image   String[]

  readAt   DateTime?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
  user     UserModel @relation(fields: [userId], references: [userId])
}

model NiceIdentify {
  id             String    @id @unique @default(uuid())
  userId         String    @unique
  requestId      String?
  responseId     String?
  authMethod     String?   @map("authType")
  nationalInfo   String?
  duplicateInfo  String?
  connectionInfo String?
  mobile         String?
  mobileCompany  String?
  createAt       DateTime  @default(now())
  updateAt       DateTime  @default(now()) @updatedAt
  deleteAt       DateTime?
  user           UserModel @relation(fields: [userId], references: [userId])
}

model Securities {
  id        String    @id @unique @default(uuid())
  userId    String    @unique
  cashKRW   Float     @default(0)
  cashUSD   Float     @default(0)
  flowerKRW Float     @default(0)
  flowerUSD Float     @default(0)
  user      UserModel @relation(fields: [userId], references: [userId])
}

model SessionModel {
  sessionId String @id
  userId    String

  platform String    @default("")
  user     UserModel @relation(fields: [userId], references: [userId])

  usedAt   DateTime  @default(now())
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
}

model MdModel {
  id     String @id @unique @default(uuid())
  userId String
  klubId String

  isManager    Boolean
  isSubManager Boolean
  allows       MdPermission[]


  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?

  klub        Klub          @relation(fields: [klubId], references: [id])
  user        UserModel     @relation(fields: [userId], references: [userId])
  Reservation Reservation[]
}

model MdLikeHistory {
  id String @id @unique @default(uuid())

  likedMd UserModel @relation(name: "likedMd", fields: [MdId], references: [userId])
  MdId    String

  UserModel       UserModel? @relation("likeMd", fields: [userModelUserId], references: [userId])
  userModelUserId String
}

model klubLikeHistory {
  id String @id @unique @default(uuid())
}

model Klub {
  id       String       @id @unique @default(uuid())
  name     String
  logo     String?
  banner   String[]
  phone    String
  isShown  Boolean      @default(true)
  hashTag  String
  musicTag String
  lat      Float        @default(0)
  lng      Float        @default(0)
  address  String       @default("")
  star     Float        @default(0)
  acceptAt DateTime?
  accepted AcceptedType @default(accepted)
  createAt DateTime     @default(now())
  updateAt DateTime     @updatedAt
  deleteAt DateTime?

  profileUrl String?
  message    String  @default("")

  klubInfo        KlubInfo?
  reviews         KlubReview[]
  md              MdModel[]
  MdRequestModel  MdRequestModel[]
  Reservation     Reservation[]
  birdViewModel   BirdViewModel[]
  tableGroupModel TableGroupModel[]
  tableModel      TableModel[]
  timeLine        TimeLineModel[]
  ReportKlubModel ReportKlubModel[]
}

model BirdViewModel {
  id String @id @unique @default(uuid())

  klub   Klub   @relation(fields: [klubId], references: [id])
  klubId String

  image   String
  name    String
  visible String
  index   Int    @default(0)

  table TableModel[]
}

model KlubReview {
  id            String                @id @unique @default(uuid())
  image         String[]
  content       String
  writerId      String
  klubId        String
  reservationId String?
  star          Int                   @default(3)
  createAt      DateTime              @default(now())
  updateAt      DateTime              @updatedAt
  deleteAt      DateTime?
  Klub          Klub                  @relation(fields: [klubId], references: [id])
  writer        UserModel             @relation(fields: [writerId], references: [userId])
  like          KlubReviewLikeModel[]
}

model KlubReviewLikeModel {
  id           String      @id @unique @default(uuid())
  like         Int         @default(1)
  klubReviewId String?
  userId       String
  kubReview    KlubReview? @relation(fields: [klubReviewId], references: [id])
  user         UserModel   @relation(fields: [userId], references: [userId])

  @@map("ReviewLikeModel")
}

model KlubInfo {
  id              String    @id @unique @default(uuid())
  klubId          String    @unique
  smoke           String?
  manAgeLower     Int?
  manAgeHigher    Int?
  womanAgeLower   Int?
  womanAgeHigher  Int?
  open            Float?
  close           Float?
  holidaysByWeek  String?
  holidaysByMonth String?
  createAt        DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  deleteAt        DateTime?
  klub            Klub      @relation(fields: [klubId], references: [id])
}

model TimeLineModel {
  id         String    @id @unique @default(uuid())
  klubId     String
  image      String[]
  content    String
  startDate  DateTime  @default(now())
  endDate    DateTime
  orderIndex Int
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  deleteAt   DateTime?
  klub       Klub      @relation(fields: [klubId], references: [id])
}

model UserSettingProfileModel {
  id               String    @id @default(uuid())
  userId           String    @unique
  country          String    @default("kr")
  language         String    @default("ko")
  lat              Float?
  lon              Float?
  inviteLink       String?
  verifyData       String?
  pushToken        String?
  ip               String?
  profileUrl       String?
  pushAllow        Boolean   @default(true)
  pushNightlyAllow Boolean   @default(true)
  smsAllow         Boolean   @default(true)
  callAllow        Boolean   @default(true)
  createAt         DateTime  @default(now())
  updateAt         DateTime  @updatedAt
  deleteAt         DateTime?
  user             UserModel @relation(fields: [userId], references: [userId])
}

model CardModel {
  id             String    @id @default(uuid())
  userId         String    @unique
  cardNumber     String
  originalNumber String
  billKey        String
  pgId           String
  pgInfo         String    @default("IAMPORT")
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  deleteAt       DateTime?
  hashed         String
  order          Int       @default(0)
  user           UserModel @relation(fields: [userId], references: [userId])
}

model LoungePostModel {
  id       String       @id @unique @default(uuid())
  userId   String?
  title    String?
  content  String?
  category PostCategory

  data    Json?
  dataStr String?

  images String[]

  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  deleteAt  DateTime?
  writeUser UserModel? @relation(fields: [userId], references: [userId])

  comments LoungePostCommentModel[]
  views    Int                      @default(0)


  ReportLoungeCommentModel ReportLoungeCommentModel[]
  ReportLoungeModel        ReportLoungeModel[]
  @@map("PostModel")
}

model LoungePostCommentModel {
  id       String                   @id @default(uuid())
  title    String?
  content  String?
  createAt DateTime                 @default(now())
  updateAt DateTime                 @updatedAt
  deleteAt DateTime?
  userId   String
  postId   String
  post     LoungePostModel          @relation(fields: [postId], references: [id])
  user     UserModel                @relation(fields: [userId], references: [userId])
  comments LoungePostCommentModel[] @relation("LoungePostCommentModelToLoungePostCommentModel")
  image    String

  loungePostCommentModel     LoungePostCommentModel?      @relation("LoungePostCommentModelToLoungePostCommentModel", fields: [loungePostCommentModelId], references: [id])
  loungePostCommentModelId   String?
  ReportLoungeCommentModel   ReportLoungeCommentModel[]
  LoungePostCommentLikeModel LoungePostCommentLikeModel[]
  LoungePostLikeModel        LoungePostLikeModel[]
  @@map("PostCommentModel")
}

model ChattingRoomModel {
  id              String             @id @unique @default(uuid())
  state           ChatRoomType
  createAt        DateTime           @default(now())
  updateAt        DateTime           @updatedAt
  deleteAt        DateTime?
  recent          DateTime?
  chatModel       ChatModel[]
  users           UsersOnChatRooms[]
  ReportChatModel ReportChatModel[]
}

model ChatModel {
  id      String  @unique @default(uuid())
  content String?

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?

  chatRoomId        String
  data              Json?
  image             String?
  userId            String
  chattingRoomModel ChattingRoomModel @relation(fields: [chatRoomId], references: [id])
  user              UserModel         @relation("ChatModelToUser", fields: [userId], references: [userId])
  ReportChatModel   ReportChatModel?  @relation(fields: [reportChatModelId], references: [id])
  reportChatModelId String?
}

model TableGroupModel {
  id         String       @unique @default(uuid())
  groupName  String
  groupPrice Int
  comments   String
  klubId     String
  image      String[]
  klub       Klub         @relation(fields: [klubId], references: [id])
  tableModel TableModel[]


}

model TableModel {
  id                String  @unique @default(uuid())
  info              String?
  poligonType       String
  poligonInfo       Json
  klubId            String
  tableGroupModelId String?

  tablePrice Int
  image      String[]

  name        String
  klub        Klub             @relation(fields: [klubId], references: [id])
  tableGroup  TableGroupModel? @relation(fields: [tableGroupModelId], references: [id])
  reservation Reservation[]

  birdViewModel   BirdViewModel? @relation(fields: [birdViewModelId], references: [id])
  birdViewModelId String
}

model ReportModel {
  id String @unique @default(uuid())
}

model AuctionModel {
  id            String  @id @unique @default(uuid())
  reservationId String?
}

model AuctionBidModel {
  id String @id @unique @default(uuid())
}

model Reservation {
  id              String @id @unique @default(uuid())
  klubId          String
  tableModelId    String
  userModelUserId String
  mdModelId       String

  reservateDate  DateTime
  outDate        DateTime?
  people         Int?
  price          Float
  ref            String
  auctionModelId String?
  
  klub           Klub       @relation(fields: [klubId], references: [id])
  md             MdModel    @relation(fields: [mdModelId], references: [id])
  table          TableModel @relation(fields: [tableModelId], references: [id])
  user           UserModel  @relation(fields: [userModelUserId], references: [userId])
  createAt       DateTime   @default(now())
  updateAt       DateTime   @updatedAt
  deleteAt       DateTime?

}

model MdRequestModel {
  id          String       @id @unique
  userId      String
  klubId      String
  message     String
  accepted    AcceptedType
  accetedDate DateTime
  createAt    DateTime     @default(now())
  updateAt    DateTime     @updatedAt
  deleteAt    DateTime?
  Klub        Klub         @relation(fields: [klubId], references: [id])
  User        UserModel    @relation("MdRequestModelToUser", fields: [userId], references: [userId])
}

model UsersOnChatRooms {
  id         String @id @unique @default(uuid())
  userId     String
  chatRoomId String

  mute   Boolean   @default(false)
  muteBy DateTime?

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?

  chattingRoomModel ChattingRoomModel @relation(fields: [chatRoomId], references: [id])
  user              UserModel         @relation("UserToUsersOnChatRooms", fields: [userId], references: [userId])
}

model ReportBaseModel {
  id String @id @unique @default(uuid())

  reportUser UserModel @relation("report", fields: [reportUserId], references: [userId])

  reportUserId String

  reportedUser   UserModel? @relation("reported ", fields: [reportedUserId], references: [userId])
  reportedUserId String?

  detail    String
  reference String



  UserModel       UserModel? @relation("reported", fields: [userModelUserId], references: [userId])
  userModelUserId String?

  chat          ReportChatModel?
  lounge        ReportLoungeModel?
  loungeComment ReportLoungeCommentModel?
  user          ReportUserModel?
  md            ReportMdModel?
  klub          ReportKlubModel?
}

model ReportChatModel {
  id        String            @id @unique @default(uuid())
  chatRoom  ChattingRoomModel @relation(fields: [chattingRoomModelId], references: [id])
  chattings ChatModel[]

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique

  chattingRoomModelId String

  checkAt  DateTime?
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?

}

model ReportLoungeModel {
  id String @id @unique @default(uuid())

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique

  loungePost        LoungePostModel @relation(fields: [loungePostModelId], references: [id])
  loungePostModelId String


}

model ReportLoungeCommentModel {
  id String @id @unique @default(uuid())

  lounge  LoungePostModel        @relation(fields: [loungePostModelId], references: [id])
  comment LoungePostCommentModel @relation(fields: [loungePostCommentModelId], references: [id])

  loungePostModelId        String
  loungePostCommentModelId String

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique

}

model ReportUserModel {
  id String @id @unique @default(uuid())

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique

}

model ReportMdModel {
  id String @id @unique @default(uuid())

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique
}

model ReportKlubModel {
  id String @id @unique @default(uuid())

  basemodel         ReportBaseModel @relation(fields: [reportBaseModelId], references: [id])
  reportBaseModelId String          @unique

  klubId String
  klub   Klub   @relation(fields: [klubId], references: [id])
}

model LoungePostCommentLikeModel {
  id   String @id @unique @default(uuid())
  like Int

  comment                  LoungePostCommentModel @relation(fields: [loungePostCommentModelId], references: [id])
  loungePostCommentModelId String                 @unique


  userId String    @unique
  user   UserModel @relation(fields: [userId], references: [userId])
}

model LoungePostLikeModel {
  id   String @id @unique @default(uuid())
  like Int


  loungePost               LoungePostCommentModel @relation(fields: [loungePostCommentModelId], references: [id])
  loungePostCommentModelId String


  userId String
  user   UserModel @relation(fields: [userId], references: [userId])

}

model Banner {
  id      String @id @unique
  image   String
  dataStr String
  data    Json
}

enum Gender {
  Female
  Male
  Others
}

enum AcceptedType {
  accepted
  denied
  postpone
  none
}

enum ChatRoomType {
  none
  open
  close
}

enum KlubType {
  club
  loungeBar
  karaoke
}

enum PostCategory {
  MaleOnly
  FemaleOnly
  MDOnly
  AdultOnly
  Open
  Korean
  English

  Notice
  BossOnly

  @@map("PostCatergory")
}

enum MdPermission {
  makeAuction
  cleanTable
  acceptMd
  writePost
  editProfile
  acceptReservation
}
